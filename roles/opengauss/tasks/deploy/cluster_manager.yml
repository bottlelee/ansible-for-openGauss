- name: Import runtime groups tasks
  ansible.builtin.import_tasks:
    file: runtime_groups.yml

- name: Deploy CM into existing data cluster
  block:
    - name: Stop cluster
      ansible.builtin.command:
        gs_om -t stop
      changed_when: false

    # 把现有的数据节点加到 'opengauss_cm' 组
    - name: Create initial cmserver list
      ansible.builtin.add_host:
        hostname: >-
          {%- if og_cluster_config.data_port in line -%}
            {{ node_info[4] }}_{{ node_info[1] }}_{{ node_info[7] }}
          {%- else -%}
            {{ node_info[3] }}_{{ node_info[1] }}_{{ node_info[6] }}
          {%- endif -%}
        groups:
          - opengauss_cm
        node_ip: "{{ node_info[2] }}"
        node_name: "{{ node_info[1] }}"
      loop: "{{ cluster_detail.stdout_lines | sort }}"
      loop_control:
        loop_var: line
      when: "(og_data_path + '/dn') in line"
      vars:
        node_info: "{{ line | regex_replace(' {1,}', '|') | split('|') }}"

    - name: "Import packages upload tasks"
      ansible.builtin.import_tasks:
        file: upload.yml
      become_user: root

    - name: Get cm package name
      ansible.builtin.set_fact:
        cm_pkg: "{{ file }}"
      loop: "{{ og_upload.files | default([]) }}"
      loop_control:
        loop_var: file
      when:
        - "'cm.tar.gz' in file"

    - name: "Change file permission of {{ cm_pkg }}"
      ansible.builtin.file:
        path: "{{ og_upload_path }}/{{ cm_pkg }}"
        owner: "{{ og_user }}"
        group: "{{ og_group }}"
        mode: "0640"
      become_user: root

    - name: Create some paths
      ansible.builtin.file:
        path: "{{ item.0 }}"
        state: directory
        owner: "{{ og_user }}"
        group: "{{ og_group }}"
        mode: "0750"
      delegate_to: "{{ item.1 }}"
      become_user: root
      with_nested:
        - ['{{ og_log_path }}/omm/cm/cm_server', '{{ og_log_path }}/omm/cm/cm_agent']
        - "{{ og_all_nodes }}"
      vars:
        og_log_path: "{{ combined_vars.opengauss_paths.gaussdbLogPath }}"

    - name: "Remove /opt/openGauss/install/om/{{ cm_pkg }}"
      ansible.builtin.file:
        path: "/opt/openGauss/install/om/{{ cm_pkg }}"
        state: absent
      become_user: root
      loop: "{{ og_all_nodes }}"
      delegate_to: "{{ item }}"

    # 这里创建一个临时的用于安装 CM 的 cluster_config.xml
    - name: "Create /tmp/cluster_config.xml"
      ansible.builtin.template:
        src: "{{ item }}"
        dest: "/tmp/cluster_config.xml"
        owner: "{{ og_user }}"
        group: "{{ og_group }}"
        mode: "0644"
        backup: true
        lstrip_blocks: true
      with_first_found:
        - "{{ inventory_dir }}/templates/cluster_config.xml.j2"
        - "cluster_config.xml.j2"
      vars:
        og_expand_cm_ips: >-
          {%- for node in groups['opengauss_cm'] -%}
            {{ hostvars[node]['node_ip'] }}{{ (loop.nextitem is defined) | ternary(',', '') }}
          {%- endfor -%}
        og_cm_names: >-
          {%- for node in groups['opengauss_cm'] -%}
            {{ hostvars[node]['node_name'] }}{{ (loop.nextitem is defined) | ternary(',', '') }}
          {%- endfor -%}
        temp_data_nodes: >-
          {{ og_data_path }}/dn
          {%- for node in groups['opengauss_cm'] if hostvars[node]['node_ip'] != og_master -%}
            ,{{ hostvars[node]['node_name'] }},{{ og_data_path }}/dn
          {%- endfor -%}
        og_replicas: >-
          ['
            {%- for node in groups['opengauss_cm'] if hostvars[node]['node_ip'] != og_master -%}
              {{ hostvars[node]['node_ip'] }}{{ (loop.nextitem is defined) | ternary("','", "") }}
            {%- endfor -%}
          ']

    # 这里需要建一个假的定时任务，包含 'om_monitor'。后续 cm_install 时会检查，否则失败。
    - name: Fake an om_monitor cron job before install
      ansible.builtin.cron:
        name: openGauss om monitor
        special_time: yearly
        job: "{{ og_home }}/install/app/bin/om_monitor"
      loop: "{{ groups['opengauss_cm'] }}"
      loop_control:
        loop_var: node
        label: "{{ hostvars[node]['node_ip'] }}"
      delegate_to: "{{ hostvars[node]['node_ip'] }}"

    - name: Install CM
      ansible.builtin.expect:
        command: "./cm_install -X /tmp/cluster_config.xml --cmpkg {{ og_upload_path }}/{{ cm_pkg }}"
        responses:
          (?i)password: "{{ og_ca_pass }}"
        chdir: "{{ og_home }}/install/app/tool/cm_tool"
      changed_when: false
      register: cm_install
      until:
        - "cm_install.stdout is defined"
        - "'CM exists' in cm_install.stdout"
      retries: 3
      timeout: 300
      ignore_errors: true

  rescue:
    - name: Install pexpect
      ansible.builtin.package:
        name: "{{ python_name }}-pexpect"
      become_user: root

    - name: Repeat tasks
      ansible.builtin.include_tasks:
        file: cluster_manager.yml

  always:
    # - name: Debug
    #   ansible.builtin.debug:
    #     var: cm_install

    - name: Start the primary data node
      ansible.builtin.command:
        "gs_om -t start -h {{ hostvars[node]['node_name'] }}"
      loop: "{{ groups['opengauss_dn'] }}"
      loop_control:
        loop_var: node
      when: "'Primary' in node"
      changed_when: false

    - name: Wait for primary node started
      ansible.builtin.wait_for:
        host: "{{ hostvars[node]['node_ip'] }}"
        port: "{{ og_cluster_config.cm_port }}"
        timeout: "600"
      loop: "{{ groups['opengauss_dn'] }}"
      loop_control:
        loop_var: node
      when: "'Primary' in node"
      changed_when: false

    - name: Start the rest of data nodes
      ansible.builtin.command:
        "gs_om -t start -h {{ hostvars[node]['node_name'] }}"
      loop: "{{ groups['opengauss_dn'] }}"
      loop_control:
        loop_var: node
      when: "'Primary' not in node"
      changed_when: false

    - name: Wait for the cluster started
      ansible.builtin.command:
        "gs_om -t status"
      register: gs_status
      until: "'Normal' in gs_status.stdout"
      retries: 30
      delay: 10
      changed_when: false
